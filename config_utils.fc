;; next three functions return information about current validator set (config param #34)
;; they are borrowed from config-code.fc
(cell, int, cell) get_current_vset() inline_ref {
  var vset = config_param(34);
  var cs = begin_parse(vset);
  ;; validators_ext#12 utime_since:uint32 utime_until:uint32 
  ;; total:(## 16) main:(## 16) { main <= total } { main >= 1 } 
  ;; total_weight:uint64
  throw_unless(40, cs~load_uint(8) == 0x12);
  cs~skip_bits(32 + 32 + 16 + 16);
  var (total_weight, dict) = (cs~load_uint(64), cs~load_dict());
  cs.end_parse();
  return (vset, total_weight, dict);
}

(slice, int) get_validator_descr(int idx) inline_ref {
  var (vset, total_weight, dict) = get_current_vset();
  var (value, _) = dict.udict_get?(16, idx);
  return (value, total_weight);
}

(int, int) unpack_validator_descr(slice cs) inline {
  ;; ed25519_pubkey#8e81278a pubkey:bits256 = SigPubKey;
  ;; validator#53 public_key:SigPubKey weight:uint64 = ValidatorDescr;
  ;; validator_addr#73 public_key:SigPubKey weight:uint64 adnl_addr:bits256 = ValidatorDescr;
  throw_unless(41, (cs~load_uint(8) & ~ 0x20) == 0x53);
  throw_unless(41, cs~load_uint(32) == 0x8e81278a);
  return (cs~load_uint(256), cs~load_uint(64));
}

(slice) elector_address() {
    var elector = config_param(1).begin_parse().preload_uint(256);
    return begin_cell()
           .store_uint(4, 3).store_uint(0xff, 8).store_uint(elector, 256)
           .end_cell()
           .begin_parse();
}

(slice) config_address() {
    var config = config_param(0).begin_parse().preload_uint(256);
    return begin_cell()
           .store_uint(4, 3).store_uint(0xff, 8).store_uint(config, 256)
           .end_cell()
           .begin_parse();
}

(int, int) stake_lock_durations() {
    slice validation_params = config_param(15).begin_parse();
    int validators_elected_for = validation_params~load_uint(32);
    validation_params~load_bits(64);
    int stake_held_for = validation_params~load_uint(32);
    return (validators_elected_for, stake_held_for);
}

