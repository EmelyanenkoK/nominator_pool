() add_stake (slice s_addr, int msg_value, tuple storage, int query_id, int is_validator?) impure {
  (slice _1, slice _2, 
   int val_balance, int nom_balance,
   int _5, int _6, int _7, int _8, cell _9, cell _10) = storage_untuple(storage);
  int stake = msg_value - fees::deposit() - fees::receipt();
  if (is_validator?) {
    val_balance += stake;
  } else {
    nom_balance += stake;
  }
  save_data(_1, _2, val_balance, nom_balance, _5, _6, _7, _8, _9, _10);
  return send_receipt_message(s_addr, op::validator::add_stake() | 0x80000000, query_id, 1, 32, fees::receipt(), 1);
}


() request_withdrawal (slice s_addr, tuple storage, int query_id, int amount, int is_validator?) impure {
  (slice _1, slice _2,
   int val_balance, int nom_balance,
   int val_request, int nom_request,
   int _7, int _8, cell _9, cell _10) = storage_untuple(storage);
  if (is_validator?) {
    if ( (amount == 0 ) | ( val_request + amount > val_balance)) {
      val_request = val_balance;
    } else {
      val_request += amount;
    }
  } else {
    if ( (amount == 0 ) | ( nom_request + amount > nom_balance)) {
      nom_request = nom_balance;
    } else {
      nom_request += amount;
    }

  }
  save_data(_1, _2, val_balance, nom_balance, val_request, nom_request, _7, _8, _9, _10);
  return send_receipt_message(s_addr, op::validator::withdraw() | 0x80000000, query_id, 0, 0, 0, 64);
}

(int) process_nominator_request (slice in_msg, int msg_value, tuple storage, slice s_addr, int is_validator?) impure {
  int op = in_msg~load_uint(32);
  int query_id = in_msg~load_uint(64);

  if (op == op::validator::add_stake() ) {
    ;; put stake into pool
    add_stake(s_addr, msg_value, storage, query_id, is_validator?);
    return true;
  }
  if (op == op::validator::withdraw() ) {
    int amount = in_msg~load_grams();
    request_withdrawal(s_addr, storage, query_id, amount, is_validator?);
    return true;
  }
  if (op == op::validator::recover_stake()) {
    ;; validator's function allowed for nominators
    ;; throw_unless(err::insufficient_fee(0), msg_value > 1000000000);
    recover_stake(msg_value, query_id, storage, s_addr, in_msg);
    return true;
  }
  return false;
}
